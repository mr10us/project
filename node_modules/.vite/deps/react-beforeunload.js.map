{
  "version": 3,
  "sources": ["../../react-beforeunload/src/useBeforeunload.js", "../../react-beforeunload/src/Beforeunload.js"],
  "sourcesContent": ["import { useEffect, useRef } from 'react';\n\n/**\n * React hook that listens to `beforeunload` window event.\n * @function\n * @param {?function(BeforeUnloadEvent): ?string} handler - Event listener\n *   called on `beforeunload` window event. It activates a confirmation dialog\n *   when `event.preventDefault()` is called or a string is returned.\n */\nexport const useBeforeunload = (handler) => {\n  const enabled = typeof handler === 'function';\n\n  // Persist handler in ref\n  const handlerRef = useRef(handler);\n  useEffect(() => {\n    handlerRef.current = handler;\n  });\n\n  useEffect(() => {\n    if (enabled) {\n      const listener = (event) => {\n        const returnValue = handlerRef.current(event);\n\n        if (typeof returnValue === 'string') {\n          event.preventDefault();\n          // Handle legacy `event.returnValue` and `return` activation.\n          // https://developer.mozilla.org/en-US/docs/Web/API/Window/beforeunload_event#compatibility_notes\n          return (event.returnValue = returnValue);\n        }\n\n        // Chrome doesn't support `event.preventDefault()` on `BeforeUnloadEvent`.\n        // https://developer.mozilla.org/en-US/docs/Web/API/Window/beforeunload_event#compatibility_notes\n        if (event.defaultPrevented) {\n          return (event.returnValue = '');\n        }\n      };\n\n      window.addEventListener('beforeunload', listener);\n      return () => {\n        window.removeEventListener('beforeunload', listener);\n      };\n    }\n  }, [enabled]);\n};\n", "import { useBeforeunload } from './useBeforeunload';\n\nexport const Beforeunload = ({ children = null, onBeforeunload }) => {\n  useBeforeunload(onBeforeunload);\n  return children;\n};\n"],
  "mappings": ";;;;;;;;;AASY,IAACA,IAAkB,CAACC,MAAY;AAC1C,QAAMC,IAAU,OAAOD,KAAY,YAG7BE,QAAaC,aAAAA,QAAOH,CAAO;AACjCI,mBAAAA,WAAU,MAAM;AACdF,MAAW,UAAUF;EACzB,CAAG,OAEDI,aAAAA,WAAU,MAAM;AACd,QAAIH,GAAS;AACX,YAAMI,IAAW,CAACC,MAAU;AAC1B,cAAMC,IAAcL,EAAW,QAAQI,CAAK;AAE5C,YAAI,OAAOC,KAAgB;AACzB,iBAAAD,EAAM,eAAc,GAGZA,EAAM,cAAcC;AAK9B,YAAID,EAAM;AACR,iBAAQA,EAAM,cAAc;MAEtC;AAEM,aAAA,OAAO,iBAAiB,gBAAgBD,CAAQ,GACzC,MAAM;AACX,eAAO,oBAAoB,gBAAgBA,CAAQ;MAC3D;IAAA;EAEA,GAAK,CAACJ,CAAO,CAAC;AACd;AAlCY,ICPCO,IAAe,CAAC,EAAE,UAAAC,IAAW,MAAM,gBAAAC,EAAc,OAC5DX,EAAgBW,CAAc,GACvBD;",
  "names": ["useBeforeunload", "handler", "enabled", "handlerRef", "useRef", "useEffect", "listener", "event", "returnValue", "Beforeunload", "children", "onBeforeunload"]
}
